<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="632"><g><title>__GI___libc_malloc (2 samples, 0.32%)</title><rect x="0.0000%" y="485" width="0.3165%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="495.50"></text></g><g><title>__free (2 samples, 0.32%)</title><rect x="0.3165%" y="485" width="0.3165%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.5665%" y="495.50"></text></g><g><title>ndarray::impl_owned_array::&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append (1 samples, 0.16%)</title><rect x="0.6329%" y="485" width="0.1582%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.8829%" y="495.50"></text></g><g><title>ndarray::linalg::impl_linalg::general_mat_vec_mul_impl (1 samples, 0.16%)</title><rect x="0.7911%" y="485" width="0.1582%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="1.0411%" y="495.50"></text></g><g><title>[[heap]] (7 samples, 1.11%)</title><rect x="0.0000%" y="501" width="1.1076%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="7"/><text x="0.2500%" y="511.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (1 samples, 0.16%)</title><rect x="0.9494%" y="485" width="0.1582%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="1.1994%" y="495.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (7 samples, 1.11%)</title><rect x="1.1076%" y="485" width="1.1076%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="7"/><text x="1.3576%" y="495.50"></text></g><g><title>ndarray::linalg::impl_linalg::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (1 samples, 0.16%)</title><rect x="2.0570%" y="469" width="0.1582%" height="15" fill="rgb(228,23,34)" fg:x="13" fg:w="1"/><text x="2.3070%" y="479.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;&gt;::dot (1 samples, 0.16%)</title><rect x="2.0570%" y="453" width="0.1582%" height="15" fill="rgb(218,30,26)" fg:x="13" fg:w="1"/><text x="2.3070%" y="463.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.47%)</title><rect x="2.2152%" y="485" width="0.4747%" height="15" fill="rgb(220,122,19)" fg:x="14" fg:w="3"/><text x="2.4652%" y="495.50"></text></g><g><title>__free (5 samples, 0.79%)</title><rect x="2.6899%" y="485" width="0.7911%" height="15" fill="rgb(250,228,42)" fg:x="17" fg:w="5"/><text x="2.9399%" y="495.50"></text></g><g><title>__tanhf (1 samples, 0.16%)</title><rect x="3.4810%" y="485" width="0.1582%" height="15" fill="rgb(240,193,28)" fg:x="22" fg:w="1"/><text x="3.7310%" y="495.50"></text></g><g><title>_int_free (17 samples, 2.69%)</title><rect x="3.6392%" y="485" width="2.6899%" height="15" fill="rgb(216,20,37)" fg:x="23" fg:w="17"/><text x="3.8892%" y="495.50">_i..</text></g><g><title>_int_malloc (2 samples, 0.32%)</title><rect x="6.3291%" y="485" width="0.3165%" height="15" fill="rgb(206,188,39)" fg:x="40" fg:w="2"/><text x="6.5791%" y="495.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (7 samples, 1.11%)</title><rect x="6.6456%" y="485" width="1.1076%" height="15" fill="rgb(217,207,13)" fg:x="42" fg:w="7"/><text x="6.8956%" y="495.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (1 samples, 0.16%)</title><rect x="7.5949%" y="469" width="0.1582%" height="15" fill="rgb(231,73,38)" fg:x="48" fg:w="1"/><text x="7.8449%" y="479.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (1 samples, 0.16%)</title><rect x="7.5949%" y="453" width="0.1582%" height="15" fill="rgb(225,20,46)" fg:x="48" fg:w="1"/><text x="7.8449%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.16%)</title><rect x="7.5949%" y="437" width="0.1582%" height="15" fill="rgb(210,31,41)" fg:x="48" fg:w="1"/><text x="7.8449%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.16%)</title><rect x="7.5949%" y="421" width="0.1582%" height="15" fill="rgb(221,200,47)" fg:x="48" fg:w="1"/><text x="7.8449%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.16%)</title><rect x="7.5949%" y="405" width="0.1582%" height="15" fill="rgb(226,26,5)" fg:x="48" fg:w="1"/><text x="7.8449%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.16%)</title><rect x="7.5949%" y="389" width="0.1582%" height="15" fill="rgb(249,33,26)" fg:x="48" fg:w="1"/><text x="7.8449%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.16%)</title><rect x="7.5949%" y="373" width="0.1582%" height="15" fill="rgb(235,183,28)" fg:x="48" fg:w="1"/><text x="7.8449%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.16%)</title><rect x="7.5949%" y="357" width="0.1582%" height="15" fill="rgb(221,5,38)" fg:x="48" fg:w="1"/><text x="7.8449%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.16%)</title><rect x="7.5949%" y="341" width="0.1582%" height="15" fill="rgb(247,18,42)" fg:x="48" fg:w="1"/><text x="7.8449%" y="351.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (2 samples, 0.32%)</title><rect x="7.7532%" y="485" width="0.3165%" height="15" fill="rgb(241,131,45)" fg:x="49" fg:w="2"/><text x="8.0032%" y="495.50"></text></g><g><title>[[stack]] (46 samples, 7.28%)</title><rect x="1.1076%" y="501" width="7.2785%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="46"/><text x="1.3576%" y="511.50">[[stack]]</text></g><g><title>ndarray::linalg::impl_linalg::general_mat_vec_mul_impl (2 samples, 0.32%)</title><rect x="8.0696%" y="485" width="0.3165%" height="15" fill="rgb(225,111,53)" fg:x="51" fg:w="2"/><text x="8.3196%" y="495.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (7 samples, 1.11%)</title><rect x="8.3861%" y="485" width="1.1076%" height="15" fill="rgb(238,160,17)" fg:x="53" fg:w="7"/><text x="8.6361%" y="495.50"></text></g><g><title>__free (1 samples, 0.16%)</title><rect x="9.4937%" y="485" width="0.1582%" height="15" fill="rgb(214,148,48)" fg:x="60" fg:w="1"/><text x="9.7437%" y="495.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (1 samples, 0.16%)</title><rect x="9.6519%" y="485" width="0.1582%" height="15" fill="rgb(232,36,49)" fg:x="61" fg:w="1"/><text x="9.9019%" y="495.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (1 samples, 0.16%)</title><rect x="9.8101%" y="485" width="0.1582%" height="15" fill="rgb(209,103,24)" fg:x="62" fg:w="1"/><text x="10.0601%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (12 samples, 1.90%)</title><rect x="8.3861%" y="501" width="1.8987%" height="15" fill="rgb(229,88,8)" fg:x="53" fg:w="12"/><text x="8.6361%" y="511.50">[..</text></g><g><title>ndarray::stacking::concatenate (2 samples, 0.32%)</title><rect x="9.9684%" y="485" width="0.3165%" height="15" fill="rgb(213,181,19)" fg:x="63" fg:w="2"/><text x="10.2184%" y="495.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (5 samples, 0.79%)</title><rect x="10.2848%" y="485" width="0.7911%" height="15" fill="rgb(254,191,54)" fg:x="65" fg:w="5"/><text x="10.5348%" y="495.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.47%)</title><rect x="11.0759%" y="485" width="0.4747%" height="15" fill="rgb(241,83,37)" fg:x="70" fg:w="3"/><text x="11.3259%" y="495.50"></text></g><g><title>__tanhf (2 samples, 0.32%)</title><rect x="11.5506%" y="485" width="0.3165%" height="15" fill="rgb(233,36,39)" fg:x="73" fg:w="2"/><text x="11.8006%" y="495.50"></text></g><g><title>_int_free (3 samples, 0.47%)</title><rect x="11.8671%" y="485" width="0.4747%" height="15" fill="rgb(226,3,54)" fg:x="75" fg:w="3"/><text x="12.1171%" y="495.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (1 samples, 0.16%)</title><rect x="12.3418%" y="485" width="0.1582%" height="15" fill="rgb(245,192,40)" fg:x="78" fg:w="1"/><text x="12.5918%" y="495.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (1 samples, 0.16%)</title><rect x="12.5000%" y="485" width="0.1582%" height="15" fill="rgb(238,167,29)" fg:x="79" fg:w="1"/><text x="12.7500%" y="495.50"></text></g><g><title>ndarray::impl_owned_array::&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append (1 samples, 0.16%)</title><rect x="12.6582%" y="485" width="0.1582%" height="15" fill="rgb(232,182,51)" fg:x="80" fg:w="1"/><text x="12.9082%" y="495.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::len_of (1 samples, 0.16%)</title><rect x="12.6582%" y="469" width="0.1582%" height="15" fill="rgb(231,60,39)" fg:x="80" fg:w="1"/><text x="12.9082%" y="479.50"></text></g><g><title>ndarray::dimension::conversion::&lt;impl core::ops::index::Index&lt;usize&gt; for ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;::index (1 samples, 0.16%)</title><rect x="12.6582%" y="453" width="0.1582%" height="15" fill="rgb(208,69,12)" fg:x="80" fg:w="1"/><text x="12.9082%" y="463.50"></text></g><g><title>ndarray::numeric_util::unrolled_dot (2 samples, 0.32%)</title><rect x="12.8165%" y="485" width="0.3165%" height="15" fill="rgb(235,93,37)" fg:x="81" fg:w="2"/><text x="13.0665%" y="495.50"></text></g><g><title>[unknown] (25 samples, 3.96%)</title><rect x="10.2848%" y="501" width="3.9557%" height="15" fill="rgb(213,116,39)" fg:x="65" fg:w="25"/><text x="10.5348%" y="511.50">[unk..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (7 samples, 1.11%)</title><rect x="13.1329%" y="485" width="1.1076%" height="15" fill="rgb(222,207,29)" fg:x="83" fg:w="7"/><text x="13.3829%" y="495.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (7 samples, 1.11%)</title><rect x="13.1329%" y="469" width="1.1076%" height="15" fill="rgb(206,96,30)" fg:x="83" fg:w="7"/><text x="13.3829%" y="479.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (1 samples, 0.16%)</title><rect x="14.0823%" y="453" width="0.1582%" height="15" fill="rgb(218,138,4)" fg:x="89" fg:w="1"/><text x="14.3323%" y="463.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (1 samples, 0.16%)</title><rect x="14.0823%" y="437" width="0.1582%" height="15" fill="rgb(250,191,14)" fg:x="89" fg:w="1"/><text x="14.3323%" y="447.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::{{closure}} (1 samples, 0.16%)</title><rect x="14.0823%" y="421" width="0.1582%" height="15" fill="rgb(239,60,40)" fg:x="89" fg:w="1"/><text x="14.3323%" y="431.50"></text></g><g><title>ndarray::linalg::impl_linalg::general_mat_vec_mul_impl::{{closure}} (1 samples, 0.16%)</title><rect x="14.0823%" y="405" width="0.1582%" height="15" fill="rgb(206,27,48)" fg:x="89" fg:w="1"/><text x="14.3323%" y="415.50"></text></g><g><title>ndarray::linalg::impl_linalg::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;::dot (1 samples, 0.16%)</title><rect x="14.0823%" y="389" width="0.1582%" height="15" fill="rgb(225,35,8)" fg:x="89" fg:w="1"/><text x="14.3323%" y="399.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;&gt;::dot (1 samples, 0.16%)</title><rect x="14.0823%" y="373" width="0.1582%" height="15" fill="rgb(250,213,24)" fg:x="89" fg:w="1"/><text x="14.3323%" y="383.50"></text></g><g><title>ndarray::linalg::impl_linalg::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;::dot_impl (1 samples, 0.16%)</title><rect x="14.0823%" y="357" width="0.1582%" height="15" fill="rgb(247,123,22)" fg:x="89" fg:w="1"/><text x="14.3323%" y="367.50"></text></g><g><title>ndarray::linalg::impl_linalg::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;::dot_generic (1 samples, 0.16%)</title><rect x="14.0823%" y="341" width="0.1582%" height="15" fill="rgb(231,138,38)" fg:x="89" fg:w="1"/><text x="14.3323%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.16%)</title><rect x="14.2405%" y="501" width="0.1582%" height="15" fill="rgb(231,145,46)" fg:x="90" fg:w="1"/><text x="14.4905%" y="511.50"></text></g><g><title>__free (32 samples, 5.06%)</title><rect x="15.8228%" y="213" width="5.0633%" height="15" fill="rgb(251,118,11)" fg:x="100" fg:w="32"/><text x="16.0728%" y="223.50">__free</text></g><g><title>_int_free (22 samples, 3.48%)</title><rect x="17.4051%" y="197" width="3.4810%" height="15" fill="rgb(217,147,25)" fg:x="110" fg:w="22"/><text x="17.6551%" y="207.50">_in..</text></g><g><title>__rdl_dealloc (1 samples, 0.16%)</title><rect x="20.8861%" y="213" width="0.1582%" height="15" fill="rgb(247,81,37)" fg:x="132" fg:w="1"/><text x="21.1361%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (40 samples, 6.33%)</title><rect x="15.3481%" y="293" width="6.3291%" height="15" fill="rgb(209,12,38)" fg:x="97" fg:w="40"/><text x="15.5981%" y="303.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (40 samples, 6.33%)</title><rect x="15.3481%" y="277" width="6.3291%" height="15" fill="rgb(227,1,9)" fg:x="97" fg:w="40"/><text x="15.5981%" y="287.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 6.33%)</title><rect x="15.3481%" y="261" width="6.3291%" height="15" fill="rgb(248,47,43)" fg:x="97" fg:w="40"/><text x="15.5981%" y="271.50">&lt;alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (40 samples, 6.33%)</title><rect x="15.3481%" y="245" width="6.3291%" height="15" fill="rgb(221,10,30)" fg:x="97" fg:w="40"/><text x="15.5981%" y="255.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (40 samples, 6.33%)</title><rect x="15.3481%" y="229" width="6.3291%" height="15" fill="rgb(210,229,1)" fg:x="97" fg:w="40"/><text x="15.5981%" y="239.50">alloc::a..</text></g><g><title>__rust_dealloc (4 samples, 0.63%)</title><rect x="21.0443%" y="213" width="0.6329%" height="15" fill="rgb(222,148,37)" fg:x="133" fg:w="4"/><text x="21.2943%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt; (41 samples, 6.49%)</title><rect x="15.3481%" y="341" width="6.4873%" height="15" fill="rgb(234,67,33)" fg:x="97" fg:w="41"/><text x="15.5981%" y="351.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;&gt; (41 samples, 6.49%)</title><rect x="15.3481%" y="325" width="6.4873%" height="15" fill="rgb(247,98,35)" fg:x="97" fg:w="41"/><text x="15.5981%" y="335.50">core::pt..</text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 6.49%)</title><rect x="15.3481%" y="309" width="6.4873%" height="15" fill="rgb(247,138,52)" fg:x="97" fg:w="41"/><text x="15.5981%" y="319.50">&lt;ndarray..</text></g><g><title>ndarray::data_repr::OwnedRepr&lt;A&gt;::take_as_vec (1 samples, 0.16%)</title><rect x="21.6772%" y="293" width="0.1582%" height="15" fill="rgb(213,79,30)" fg:x="137" fg:w="1"/><text x="21.9272%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.32%)</title><rect x="22.9430%" y="325" width="0.3165%" height="15" fill="rgb(246,177,23)" fg:x="145" fg:w="2"/><text x="23.1930%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.16%)</title><rect x="23.1013%" y="309" width="0.1582%" height="15" fill="rgb(230,62,27)" fg:x="146" fg:w="1"/><text x="23.3513%" y="319.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.16%)</title><rect x="23.5759%" y="213" width="0.1582%" height="15" fill="rgb(216,154,8)" fg:x="149" fg:w="1"/><text x="23.8259%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.63%)</title><rect x="23.2595%" y="325" width="0.6329%" height="15" fill="rgb(244,35,45)" fg:x="147" fg:w="4"/><text x="23.5095%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.63%)</title><rect x="23.2595%" y="309" width="0.6329%" height="15" fill="rgb(251,115,12)" fg:x="147" fg:w="4"/><text x="23.5095%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.63%)</title><rect x="23.2595%" y="293" width="0.6329%" height="15" fill="rgb(240,54,50)" fg:x="147" fg:w="4"/><text x="23.5095%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.63%)</title><rect x="23.2595%" y="277" width="0.6329%" height="15" fill="rgb(233,84,52)" fg:x="147" fg:w="4"/><text x="23.5095%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.32%)</title><rect x="23.5759%" y="261" width="0.3165%" height="15" fill="rgb(207,117,47)" fg:x="149" fg:w="2"/><text x="23.8259%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.32%)</title><rect x="23.5759%" y="245" width="0.3165%" height="15" fill="rgb(249,43,39)" fg:x="149" fg:w="2"/><text x="23.8259%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.32%)</title><rect x="23.5759%" y="229" width="0.3165%" height="15" fill="rgb(209,38,44)" fg:x="149" fg:w="2"/><text x="23.8259%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.16%)</title><rect x="23.7342%" y="213" width="0.1582%" height="15" fill="rgb(236,212,23)" fg:x="150" fg:w="1"/><text x="23.9842%" y="223.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (1 samples, 0.16%)</title><rect x="23.8924%" y="325" width="0.1582%" height="15" fill="rgb(242,79,21)" fg:x="151" fg:w="1"/><text x="24.1424%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (2 samples, 0.32%)</title><rect x="24.0506%" y="325" width="0.3165%" height="15" fill="rgb(211,96,35)" fg:x="152" fg:w="2"/><text x="24.3006%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_vec_dim_stride_unchecked (2 samples, 0.32%)</title><rect x="24.0506%" y="309" width="0.3165%" height="15" fill="rgb(253,215,40)" fg:x="152" fg:w="2"/><text x="24.3006%" y="319.50"></text></g><g><title>ndarray::impl_internal_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::with_strides_dim (2 samples, 0.32%)</title><rect x="24.0506%" y="293" width="0.3165%" height="15" fill="rgb(211,81,21)" fg:x="152" fg:w="2"/><text x="24.3006%" y="303.50"></text></g><g><title>ndarray::data_repr::OwnedRepr&lt;A&gt;::as_ptr (2 samples, 0.32%)</title><rect x="25.9494%" y="309" width="0.3165%" height="15" fill="rgb(208,190,38)" fg:x="164" fg:w="2"/><text x="26.1994%" y="319.50"></text></g><g><title>ndarray::data_repr::OwnedRepr&lt;A&gt;::reserve (1 samples, 0.16%)</title><rect x="26.2658%" y="309" width="0.1582%" height="15" fill="rgb(235,213,38)" fg:x="166" fg:w="1"/><text x="26.5158%" y="319.50"></text></g><g><title>ndarray::data_repr::OwnedRepr&lt;A&gt;::modify_as_vec (1 samples, 0.16%)</title><rect x="26.2658%" y="293" width="0.1582%" height="15" fill="rgb(237,122,38)" fg:x="166" fg:w="1"/><text x="26.5158%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_ptr (1 samples, 0.16%)</title><rect x="26.4241%" y="309" width="0.1582%" height="15" fill="rgb(244,218,35)" fg:x="167" fg:w="1"/><text x="26.6741%" y="319.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::len_of (1 samples, 0.16%)</title><rect x="26.5823%" y="309" width="0.1582%" height="15" fill="rgb(240,68,47)" fg:x="168" fg:w="1"/><text x="26.8323%" y="319.50"></text></g><g><title>ndarray::dimension::conversion::&lt;impl core::ops::index::Index&lt;usize&gt; for ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;::index (1 samples, 0.16%)</title><rect x="26.5823%" y="293" width="0.1582%" height="15" fill="rgb(210,16,53)" fg:x="168" fg:w="1"/><text x="26.8323%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;(P,),D&gt;::from (1 samples, 0.16%)</title><rect x="26.7405%" y="309" width="0.1582%" height="15" fill="rgb(235,124,12)" fg:x="169" fg:w="1"/><text x="26.9905%" y="319.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;*mut A&gt;,D&gt; as ndarray::zip::ndproducer::NdProducer&gt;::layout (1 samples, 0.16%)</title><rect x="26.7405%" y="293" width="0.1582%" height="15" fill="rgb(224,169,11)" fg:x="169" fg:w="1"/><text x="26.9905%" y="303.50"></text></g><g><title>ndarray::zip::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::layout_impl (1 samples, 0.16%)</title><rect x="26.7405%" y="277" width="0.1582%" height="15" fill="rgb(250,166,2)" fg:x="169" fg:w="1"/><text x="26.9905%" y="287.50"></text></g><g><title>ndarray::zip::array_layout (1 samples, 0.16%)</title><rect x="26.7405%" y="261" width="0.1582%" height="15" fill="rgb(242,216,29)" fg:x="169" fg:w="1"/><text x="26.9905%" y="271.50"></text></g><g><title>ndarray::dimension::is_layout_c (1 samples, 0.16%)</title><rect x="26.7405%" y="245" width="0.1582%" height="15" fill="rgb(230,116,27)" fg:x="169" fg:w="1"/><text x="26.9905%" y="255.50"></text></g><g><title>ndarray::stacking::concatenate (36 samples, 5.70%)</title><rect x="21.8354%" y="341" width="5.6962%" height="15" fill="rgb(228,99,48)" fg:x="138" fg:w="36"/><text x="22.0854%" y="351.50">ndarray..</text></g><g><title>ndarray::impl_owned_array::&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append (20 samples, 3.16%)</title><rect x="24.3671%" y="325" width="3.1646%" height="15" fill="rgb(253,11,6)" fg:x="154" fg:w="20"/><text x="24.6171%" y="335.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (4 samples, 0.63%)</title><rect x="26.8987%" y="309" width="0.6329%" height="15" fill="rgb(247,143,39)" fg:x="170" fg:w="4"/><text x="27.1487%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (4 samples, 0.63%)</title><rect x="26.8987%" y="293" width="0.6329%" height="15" fill="rgb(236,97,10)" fg:x="170" fg:w="4"/><text x="27.1487%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (1 samples, 0.16%)</title><rect x="27.3734%" y="277" width="0.1582%" height="15" fill="rgb(233,208,19)" fg:x="173" fg:w="1"/><text x="27.6234%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (1 samples, 0.16%)</title><rect x="27.3734%" y="261" width="0.1582%" height="15" fill="rgb(216,164,2)" fg:x="173" fg:w="1"/><text x="27.6234%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.79%)</title><rect x="31.4873%" y="309" width="0.7911%" height="15" fill="rgb(220,129,5)" fg:x="199" fg:w="5"/><text x="31.7373%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5 samples, 0.79%)</title><rect x="31.4873%" y="293" width="0.7911%" height="15" fill="rgb(242,17,10)" fg:x="199" fg:w="5"/><text x="31.7373%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5 samples, 0.79%)</title><rect x="31.4873%" y="277" width="0.7911%" height="15" fill="rgb(242,107,0)" fg:x="199" fg:w="5"/><text x="31.7373%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (19 samples, 3.01%)</title><rect x="32.2785%" y="309" width="3.0063%" height="15" fill="rgb(251,28,31)" fg:x="204" fg:w="19"/><text x="32.5285%" y="319.50">cor..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 2.06%)</title><rect x="35.6013%" y="293" width="2.0570%" height="15" fill="rgb(233,223,10)" fg:x="225" fg:w="13"/><text x="35.8513%" y="303.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (13 samples, 2.06%)</title><rect x="35.6013%" y="277" width="2.0570%" height="15" fill="rgb(215,21,27)" fg:x="225" fg:w="13"/><text x="35.8513%" y="287.50">&lt;..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (2 samples, 0.32%)</title><rect x="37.6582%" y="293" width="0.3165%" height="15" fill="rgb(232,23,21)" fg:x="238" fg:w="2"/><text x="37.9082%" y="303.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr (2 samples, 0.32%)</title><rect x="37.6582%" y="277" width="0.3165%" height="15" fill="rgb(244,5,23)" fg:x="238" fg:w="2"/><text x="37.9082%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.32%)</title><rect x="37.6582%" y="261" width="0.3165%" height="15" fill="rgb(226,81,46)" fg:x="238" fg:w="2"/><text x="37.9082%" y="271.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::{{closure}} (2 samples, 0.32%)</title><rect x="37.6582%" y="245" width="0.3165%" height="15" fill="rgb(247,70,30)" fg:x="238" fg:w="2"/><text x="37.9082%" y="255.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (71 samples, 11.23%)</title><rect x="27.6899%" y="325" width="11.2342%" height="15" fill="rgb(212,68,19)" fg:x="175" fg:w="71"/><text x="27.9399%" y="335.50">ndarray::impl_ops..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (23 samples, 3.64%)</title><rect x="35.2848%" y="309" width="3.6392%" height="15" fill="rgb(240,187,13)" fg:x="223" fg:w="23"/><text x="35.5348%" y="319.50">ndar..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order_mut (6 samples, 0.95%)</title><rect x="37.9747%" y="293" width="0.9494%" height="15" fill="rgb(223,113,26)" fg:x="240" fg:w="6"/><text x="38.2247%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::try_as_slice_memory_order_mut (6 samples, 0.95%)</title><rect x="37.9747%" y="277" width="0.9494%" height="15" fill="rgb(206,192,2)" fg:x="240" fg:w="6"/><text x="38.2247%" y="287.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr (4 samples, 0.63%)</title><rect x="38.2911%" y="261" width="0.6329%" height="15" fill="rgb(241,108,4)" fg:x="242" fg:w="4"/><text x="38.5411%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.63%)</title><rect x="38.2911%" y="245" width="0.6329%" height="15" fill="rgb(247,173,49)" fg:x="242" fg:w="4"/><text x="38.5411%" y="255.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::{{closure}} (4 samples, 0.63%)</title><rect x="38.2911%" y="229" width="0.6329%" height="15" fill="rgb(224,114,35)" fg:x="242" fg:w="4"/><text x="38.5411%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::t (6 samples, 0.95%)</title><rect x="38.9241%" y="293" width="0.9494%" height="15" fill="rgb(245,159,27)" fg:x="246" fg:w="6"/><text x="39.1741%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::reversed_axes (6 samples, 0.95%)</title><rect x="38.9241%" y="277" width="0.9494%" height="15" fill="rgb(245,172,44)" fg:x="246" fg:w="6"/><text x="39.1741%" y="287.50"></text></g><g><title>__GI___libc_malloc (21 samples, 3.32%)</title><rect x="41.2975%" y="133" width="3.3228%" height="15" fill="rgb(236,23,11)" fg:x="261" fg:w="21"/><text x="41.5475%" y="143.50">__G..</text></g><g><title>__rdl_alloc (2 samples, 0.32%)</title><rect x="44.6203%" y="133" width="0.3165%" height="15" fill="rgb(205,117,38)" fg:x="282" fg:w="2"/><text x="44.8703%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 4.11%)</title><rect x="41.1392%" y="181" width="4.1139%" height="15" fill="rgb(237,72,25)" fg:x="260" fg:w="26"/><text x="41.3892%" y="191.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 4.11%)</title><rect x="41.1392%" y="165" width="4.1139%" height="15" fill="rgb(244,70,9)" fg:x="260" fg:w="26"/><text x="41.3892%" y="175.50">allo..</text></g><g><title>alloc::alloc::alloc (26 samples, 4.11%)</title><rect x="41.1392%" y="149" width="4.1139%" height="15" fill="rgb(217,125,39)" fg:x="260" fg:w="26"/><text x="41.3892%" y="159.50">allo..</text></g><g><title>__rust_alloc (2 samples, 0.32%)</title><rect x="44.9367%" y="133" width="0.3165%" height="15" fill="rgb(235,36,10)" fg:x="284" fg:w="2"/><text x="45.1867%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (34 samples, 5.38%)</title><rect x="40.0316%" y="245" width="5.3797%" height="15" fill="rgb(251,123,47)" fg:x="253" fg:w="34"/><text x="40.2816%" y="255.50">alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (34 samples, 5.38%)</title><rect x="40.0316%" y="229" width="5.3797%" height="15" fill="rgb(221,13,13)" fg:x="253" fg:w="34"/><text x="40.2816%" y="239.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 5.38%)</title><rect x="40.0316%" y="213" width="5.3797%" height="15" fill="rgb(238,131,9)" fg:x="253" fg:w="34"/><text x="40.2816%" y="223.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 5.38%)</title><rect x="40.0316%" y="197" width="5.3797%" height="15" fill="rgb(211,50,8)" fg:x="253" fg:w="34"/><text x="40.2816%" y="207.50">alloc::..</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.16%)</title><rect x="45.2532%" y="181" width="0.1582%" height="15" fill="rgb(245,182,24)" fg:x="286" fg:w="1"/><text x="45.5032%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.16%)</title><rect x="45.2532%" y="165" width="0.1582%" height="15" fill="rgb(242,14,37)" fg:x="286" fg:w="1"/><text x="45.5032%" y="175.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::uninit (37 samples, 5.85%)</title><rect x="40.0316%" y="261" width="5.8544%" height="15" fill="rgb(246,228,12)" fg:x="253" fg:w="37"/><text x="40.2816%" y="271.50">ndarray..</text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (3 samples, 0.47%)</title><rect x="45.4114%" y="245" width="0.4747%" height="15" fill="rgb(213,55,15)" fg:x="287" fg:w="3"/><text x="45.6614%" y="255.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_vec_dim_stride_unchecked (3 samples, 0.47%)</title><rect x="45.4114%" y="229" width="0.4747%" height="15" fill="rgb(209,9,3)" fg:x="287" fg:w="3"/><text x="45.6614%" y="239.50"></text></g><g><title>ndarray::impl_internal_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::with_strides_dim (3 samples, 0.47%)</title><rect x="45.4114%" y="213" width="0.4747%" height="15" fill="rgb(230,59,30)" fg:x="287" fg:w="3"/><text x="45.6614%" y="223.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;I&gt; as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="45.8861%" y="245" width="0.1582%" height="15" fill="rgb(209,121,21)" fg:x="290" fg:w="1"/><text x="46.1361%" y="255.50"></text></g><g><title>core::array::&lt;impl core::clone::Clone for [T: N]&gt;::clone (1 samples, 0.16%)</title><rect x="45.8861%" y="229" width="0.1582%" height="15" fill="rgb(220,109,13)" fg:x="290" fg:w="1"/><text x="46.1361%" y="239.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (1 samples, 0.16%)</title><rect x="45.8861%" y="213" width="0.1582%" height="15" fill="rgb(232,18,1)" fg:x="290" fg:w="1"/><text x="46.1361%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::dim (3 samples, 0.47%)</title><rect x="45.8861%" y="261" width="0.4747%" height="15" fill="rgb(215,41,42)" fg:x="290" fg:w="3"/><text x="46.1361%" y="271.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 2]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::into_pattern (2 samples, 0.32%)</title><rect x="46.0443%" y="245" width="0.3165%" height="15" fill="rgb(224,123,36)" fg:x="291" fg:w="2"/><text x="46.2943%" y="255.50"></text></g><g><title>&lt;[usize: 2] as ndarray::dimension::conversion::Convert&gt;::convert (2 samples, 0.32%)</title><rect x="46.0443%" y="229" width="0.3165%" height="15" fill="rgb(240,125,3)" fg:x="291" fg:w="2"/><text x="46.2943%" y="239.50"></text></g><g><title>ndarray::impl_raw_views::&lt;impl ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;*mut A&gt;,D&gt;&gt;::cast (2 samples, 0.32%)</title><rect x="46.3608%" y="261" width="0.3165%" height="15" fill="rgb(205,98,50)" fg:x="293" fg:w="2"/><text x="46.6108%" y="271.50"></text></g><g><title>ndarray::impl_raw_views::&lt;impl ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;*mut A&gt;,D&gt;&gt;::new (2 samples, 0.32%)</title><rect x="46.3608%" y="245" width="0.3165%" height="15" fill="rgb(205,185,37)" fg:x="293" fg:w="2"/><text x="46.6108%" y="255.50"></text></g><g><title>ndarray::impl_internal_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::with_strides_dim (2 samples, 0.32%)</title><rect x="46.3608%" y="229" width="0.3165%" height="15" fill="rgb(238,207,15)" fg:x="293" fg:w="2"/><text x="46.6108%" y="239.50"></text></g><g><title>ndarray::impl_special_element_types::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assume_init (1 samples, 0.16%)</title><rect x="46.6772%" y="261" width="0.1582%" height="15" fill="rgb(213,199,42)" fg:x="295" fg:w="1"/><text x="46.9272%" y="271.50"></text></g><g><title>ndarray::impl_internal_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::with_strides_dim (1 samples, 0.16%)</title><rect x="46.6772%" y="245" width="0.1582%" height="15" fill="rgb(235,201,11)" fg:x="295" fg:w="1"/><text x="46.9272%" y="255.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::outer_iter (2 samples, 0.32%)</title><rect x="48.1013%" y="245" width="0.3165%" height="15" fill="rgb(207,46,11)" fg:x="304" fg:w="2"/><text x="48.3513%" y="255.50"></text></g><g><title>ndarray::impl_views::conversions::&lt;impl ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;A&gt;,D&gt;&gt;::into_outer_iter (2 samples, 0.32%)</title><rect x="48.1013%" y="229" width="0.3165%" height="15" fill="rgb(241,35,35)" fg:x="304" fg:w="2"/><text x="48.3513%" y="239.50"></text></g><g><title>ndarray::iterators::AxisIter&lt;A,D&gt;::new (2 samples, 0.32%)</title><rect x="48.1013%" y="213" width="0.3165%" height="15" fill="rgb(243,32,47)" fg:x="304" fg:w="2"/><text x="48.3513%" y="223.50"></text></g><g><title>ndarray::iterators::AxisIterCore&lt;A,D&gt;::new (2 samples, 0.32%)</title><rect x="48.1013%" y="197" width="0.3165%" height="15" fill="rgb(247,202,23)" fg:x="304" fg:w="2"/><text x="48.3513%" y="207.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 2]&gt; as ndarray::dimension::remove_axis::RemoveAxis&gt;::remove_axis (2 samples, 0.32%)</title><rect x="48.1013%" y="181" width="0.3165%" height="15" fill="rgb(219,102,11)" fg:x="304" fg:w="2"/><text x="48.3513%" y="191.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;*mut A&gt;,D&gt; as ndarray::zip::ndproducer::NdProducer&gt;::layout (5 samples, 0.79%)</title><rect x="49.0506%" y="213" width="0.7911%" height="15" fill="rgb(243,110,44)" fg:x="310" fg:w="5"/><text x="49.3006%" y="223.50"></text></g><g><title>ndarray::zip::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::layout_impl (5 samples, 0.79%)</title><rect x="49.0506%" y="197" width="0.7911%" height="15" fill="rgb(222,74,54)" fg:x="310" fg:w="5"/><text x="49.3006%" y="207.50"></text></g><g><title>ndarray::zip::array_layout (5 samples, 0.79%)</title><rect x="49.0506%" y="181" width="0.7911%" height="15" fill="rgb(216,99,12)" fg:x="310" fg:w="5"/><text x="49.3006%" y="191.50"></text></g><g><title>ndarray::dimension::is_layout_c (4 samples, 0.63%)</title><rect x="49.2089%" y="165" width="0.6329%" height="15" fill="rgb(226,22,26)" fg:x="311" fg:w="4"/><text x="49.4589%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,),D&gt;::and (12 samples, 1.90%)</title><rect x="48.4177%" y="245" width="1.8987%" height="15" fill="rgb(217,163,10)" fg:x="306" fg:w="12"/><text x="48.6677%" y="255.50">n..</text></g><g><title>ndarray::zip::Zip&lt;(P1,),D&gt;::build_and (12 samples, 1.90%)</title><rect x="48.4177%" y="229" width="1.8987%" height="15" fill="rgb(213,25,53)" fg:x="306" fg:w="12"/><text x="48.6677%" y="239.50">n..</text></g><g><title>ndarray::layout::Layout::tendency (3 samples, 0.47%)</title><rect x="49.8418%" y="213" width="0.4747%" height="15" fill="rgb(252,105,26)" fg:x="315" fg:w="3"/><text x="50.0918%" y="223.50"></text></g><g><title>&lt;(A,B) as ndarray::zip::ZippableTuple&gt;::as_ptr (3 samples, 0.47%)</title><rect x="51.1076%" y="197" width="0.4747%" height="15" fill="rgb(220,39,43)" fg:x="323" fg:w="3"/><text x="51.3576%" y="207.50"></text></g><g><title>&lt;ndarray::iterators::AxisIter&lt;A,D&gt; as ndarray::zip::ndproducer::NdProducer&gt;::as_ptr (3 samples, 0.47%)</title><rect x="51.1076%" y="181" width="0.4747%" height="15" fill="rgb(229,68,48)" fg:x="323" fg:w="3"/><text x="51.3576%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (2 samples, 0.32%)</title><rect x="53.0063%" y="149" width="0.3165%" height="15" fill="rgb(252,8,32)" fg:x="335" fg:w="2"/><text x="53.2563%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.32%)</title><rect x="53.3228%" y="149" width="0.3165%" height="15" fill="rgb(223,20,43)" fg:x="337" fg:w="2"/><text x="53.5728%" y="159.50"></text></g><g><title>core::ptr::write (2 samples, 0.32%)</title><rect x="53.3228%" y="133" width="0.3165%" height="15" fill="rgb(229,81,49)" fg:x="337" fg:w="2"/><text x="53.5728%" y="143.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (4 samples, 0.63%)</title><rect x="56.6456%" y="85" width="0.6329%" height="15" fill="rgb(236,28,36)" fg:x="358" fg:w="4"/><text x="56.8956%" y="95.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.16%)</title><rect x="57.2785%" y="85" width="0.1582%" height="15" fill="rgb(249,185,26)" fg:x="362" fg:w="1"/><text x="57.5285%" y="95.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.47%)</title><rect x="57.4367%" y="85" width="0.4747%" height="15" fill="rgb(249,174,33)" fg:x="363" fg:w="3"/><text x="57.6867%" y="95.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.47%)</title><rect x="57.4367%" y="69" width="0.4747%" height="15" fill="rgb(233,201,37)" fg:x="363" fg:w="3"/><text x="57.6867%" y="79.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice (2 samples, 0.32%)</title><rect x="57.9114%" y="85" width="0.3165%" height="15" fill="rgb(221,78,26)" fg:x="366" fg:w="2"/><text x="58.1614%" y="95.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_standard_layout (2 samples, 0.32%)</title><rect x="57.9114%" y="69" width="0.3165%" height="15" fill="rgb(250,127,30)" fg:x="366" fg:w="2"/><text x="58.1614%" y="79.50"></text></g><g><title>ndarray::dimension::is_layout_c (2 samples, 0.32%)</title><rect x="57.9114%" y="53" width="0.3165%" height="15" fill="rgb(230,49,44)" fg:x="366" fg:w="2"/><text x="58.1614%" y="63.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (3 samples, 0.47%)</title><rect x="58.7025%" y="69" width="0.4747%" height="15" fill="rgb(229,67,23)" fg:x="371" fg:w="3"/><text x="58.9525%" y="79.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.16%)</title><rect x="59.1772%" y="69" width="0.1582%" height="15" fill="rgb(249,83,47)" fg:x="374" fg:w="1"/><text x="59.4272%" y="79.50"></text></g><g><title>nn::nn::Linear::calc (203 samples, 32.12%)</title><rect x="27.5316%" y="341" width="32.1203%" height="15" fill="rgb(215,43,3)" fg:x="174" fg:w="203"/><text x="27.7816%" y="351.50">nn::nn::Linear::calc</text></g><g><title>ndarray::linalg::impl_linalg::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;::dot (131 samples, 20.73%)</title><rect x="38.9241%" y="325" width="20.7278%" height="15" fill="rgb(238,154,13)" fg:x="246" fg:w="131"/><text x="39.1741%" y="335.50">ndarray::linalg::impl_linalg::&lt;im..</text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (131 samples, 20.73%)</title><rect x="38.9241%" y="309" width="20.7278%" height="15" fill="rgb(219,56,2)" fg:x="246" fg:w="131"/><text x="39.1741%" y="319.50">&lt;ndarray::ArrayBase&lt;S,ndarray::di..</text></g><g><title>ndarray::linalg::impl_linalg::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (125 samples, 19.78%)</title><rect x="39.8734%" y="293" width="19.7785%" height="15" fill="rgb(233,0,4)" fg:x="252" fg:w="125"/><text x="40.1234%" y="303.50">ndarray::linalg::impl_linalg::&lt;..</text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;&gt;::dot (125 samples, 19.78%)</title><rect x="39.8734%" y="277" width="19.7785%" height="15" fill="rgb(235,30,7)" fg:x="252" fg:w="125"/><text x="40.1234%" y="287.50">&lt;ndarray::ArrayBase&lt;S,ndarray::..</text></g><g><title>ndarray::linalg::impl_linalg::general_mat_vec_mul_impl (81 samples, 12.82%)</title><rect x="46.8354%" y="261" width="12.8165%" height="15" fill="rgb(250,79,13)" fg:x="296" fg:w="81"/><text x="47.0854%" y="271.50">ndarray::linalg::im..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (59 samples, 9.34%)</title><rect x="50.3165%" y="245" width="9.3354%" height="15" fill="rgb(211,146,34)" fg:x="318" fg:w="59"/><text x="50.5665%" y="255.50">ndarray::zip:..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (59 samples, 9.34%)</title><rect x="50.3165%" y="229" width="9.3354%" height="15" fill="rgb(228,22,38)" fg:x="318" fg:w="59"/><text x="50.5665%" y="239.50">ndarray::zip:..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (54 samples, 8.54%)</title><rect x="51.1076%" y="213" width="8.5443%" height="15" fill="rgb(235,168,5)" fg:x="323" fg:w="54"/><text x="51.3576%" y="223.50">ndarray::zip..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (51 samples, 8.07%)</title><rect x="51.5823%" y="197" width="8.0696%" height="15" fill="rgb(221,155,16)" fg:x="326" fg:w="51"/><text x="51.8323%" y="207.50">ndarray::zi..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::{{closure}} (42 samples, 6.65%)</title><rect x="53.0063%" y="181" width="6.6456%" height="15" fill="rgb(215,215,53)" fg:x="335" fg:w="42"/><text x="53.2563%" y="191.50">ndarray::..</text></g><g><title>ndarray::linalg::impl_linalg::general_mat_vec_mul_impl::{{closure}} (42 samples, 6.65%)</title><rect x="53.0063%" y="165" width="6.6456%" height="15" fill="rgb(223,4,10)" fg:x="335" fg:w="42"/><text x="53.2563%" y="175.50">ndarray::..</text></g><g><title>ndarray::linalg::impl_linalg::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;::dot (38 samples, 6.01%)</title><rect x="53.6392%" y="149" width="6.0127%" height="15" fill="rgb(234,103,6)" fg:x="339" fg:w="38"/><text x="53.8892%" y="159.50">ndarray:..</text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;&gt;::dot (38 samples, 6.01%)</title><rect x="53.6392%" y="133" width="6.0127%" height="15" fill="rgb(227,97,0)" fg:x="339" fg:w="38"/><text x="53.8892%" y="143.50">&lt;ndarray..</text></g><g><title>ndarray::linalg::impl_linalg::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;::dot_impl (38 samples, 6.01%)</title><rect x="53.6392%" y="117" width="6.0127%" height="15" fill="rgb(234,150,53)" fg:x="339" fg:w="38"/><text x="53.8892%" y="127.50">ndarray:..</text></g><g><title>ndarray::linalg::impl_linalg::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;::dot_generic (38 samples, 6.01%)</title><rect x="53.6392%" y="101" width="6.0127%" height="15" fill="rgb(228,201,54)" fg:x="339" fg:w="38"/><text x="53.8892%" y="111.50">ndarray:..</text></g><g><title>ndarray::numeric_util::unrolled_dot (9 samples, 1.42%)</title><rect x="58.2278%" y="85" width="1.4241%" height="15" fill="rgb(222,22,37)" fg:x="368" fg:w="9"/><text x="58.4778%" y="95.50"></text></g><g><title>core::cmp::min (2 samples, 0.32%)</title><rect x="59.3354%" y="69" width="0.3165%" height="15" fill="rgb(237,53,32)" fg:x="375" fg:w="2"/><text x="59.5854%" y="79.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.32%)</title><rect x="59.3354%" y="53" width="0.3165%" height="15" fill="rgb(233,25,53)" fg:x="375" fg:w="2"/><text x="59.5854%" y="63.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.32%)</title><rect x="59.3354%" y="37" width="0.3165%" height="15" fill="rgb(210,40,34)" fg:x="375" fg:w="2"/><text x="59.5854%" y="47.50"></text></g><g><title>__free (11 samples, 1.74%)</title><rect x="59.8101%" y="197" width="1.7405%" height="15" fill="rgb(241,220,44)" fg:x="378" fg:w="11"/><text x="60.0601%" y="207.50"></text></g><g><title>_int_free (9 samples, 1.42%)</title><rect x="60.1266%" y="181" width="1.4241%" height="15" fill="rgb(235,28,35)" fg:x="380" fg:w="9"/><text x="60.3766%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt; (13 samples, 2.06%)</title><rect x="59.6519%" y="325" width="2.0570%" height="15" fill="rgb(210,56,17)" fg:x="377" fg:w="13"/><text x="59.9019%" y="335.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;&gt; (13 samples, 2.06%)</title><rect x="59.6519%" y="309" width="2.0570%" height="15" fill="rgb(224,130,29)" fg:x="377" fg:w="13"/><text x="59.9019%" y="319.50">c..</text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 2.06%)</title><rect x="59.6519%" y="293" width="2.0570%" height="15" fill="rgb(235,212,8)" fg:x="377" fg:w="13"/><text x="59.9019%" y="303.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (12 samples, 1.90%)</title><rect x="59.8101%" y="277" width="1.8987%" height="15" fill="rgb(223,33,50)" fg:x="378" fg:w="12"/><text x="60.0601%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (12 samples, 1.90%)</title><rect x="59.8101%" y="261" width="1.8987%" height="15" fill="rgb(219,149,13)" fg:x="378" fg:w="12"/><text x="60.0601%" y="271.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 1.90%)</title><rect x="59.8101%" y="245" width="1.8987%" height="15" fill="rgb(250,156,29)" fg:x="378" fg:w="12"/><text x="60.0601%" y="255.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 1.90%)</title><rect x="59.8101%" y="229" width="1.8987%" height="15" fill="rgb(216,193,19)" fg:x="378" fg:w="12"/><text x="60.0601%" y="239.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (12 samples, 1.90%)</title><rect x="59.8101%" y="213" width="1.8987%" height="15" fill="rgb(216,135,14)" fg:x="378" fg:w="12"/><text x="60.0601%" y="223.50">a..</text></g><g><title>__rdl_dealloc (1 samples, 0.16%)</title><rect x="61.5506%" y="197" width="0.1582%" height="15" fill="rgb(241,47,5)" fg:x="389" fg:w="1"/><text x="61.8006%" y="207.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_vec_dim_stride_unchecked (2 samples, 0.32%)</title><rect x="61.8671%" y="277" width="0.3165%" height="15" fill="rgb(233,42,35)" fg:x="391" fg:w="2"/><text x="62.1171%" y="287.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr (2 samples, 0.32%)</title><rect x="61.8671%" y="261" width="0.3165%" height="15" fill="rgb(231,13,6)" fg:x="391" fg:w="2"/><text x="62.1171%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.32%)</title><rect x="61.8671%" y="245" width="0.3165%" height="15" fill="rgb(207,181,40)" fg:x="391" fg:w="2"/><text x="62.1171%" y="255.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::{{closure}} (2 samples, 0.32%)</title><rect x="61.8671%" y="229" width="0.3165%" height="15" fill="rgb(254,173,49)" fg:x="391" fg:w="2"/><text x="62.1171%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.32%)</title><rect x="62.1835%" y="261" width="0.3165%" height="15" fill="rgb(221,1,38)" fg:x="393" fg:w="2"/><text x="62.4335%" y="271.50"></text></g><g><title>__GI___libc_malloc (11 samples, 1.74%)</title><rect x="62.9747%" y="149" width="1.7405%" height="15" fill="rgb(206,124,46)" fg:x="398" fg:w="11"/><text x="63.2247%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 2.06%)</title><rect x="62.9747%" y="197" width="2.0570%" height="15" fill="rgb(249,21,11)" fg:x="398" fg:w="13"/><text x="63.2247%" y="207.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 2.06%)</title><rect x="62.9747%" y="181" width="2.0570%" height="15" fill="rgb(222,201,40)" fg:x="398" fg:w="13"/><text x="63.2247%" y="191.50">a..</text></g><g><title>alloc::alloc::alloc (13 samples, 2.06%)</title><rect x="62.9747%" y="165" width="2.0570%" height="15" fill="rgb(235,61,29)" fg:x="398" fg:w="13"/><text x="63.2247%" y="175.50">a..</text></g><g><title>__rdl_alloc (2 samples, 0.32%)</title><rect x="64.7152%" y="149" width="0.3165%" height="15" fill="rgb(219,207,3)" fg:x="409" fg:w="2"/><text x="64.9652%" y="159.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (22 samples, 3.48%)</title><rect x="61.7089%" y="293" width="3.4810%" height="15" fill="rgb(222,56,46)" fg:x="390" fg:w="22"/><text x="61.9589%" y="303.50">nda..</text></g><g><title>ndarray::iterators::to_vec_mapped (19 samples, 3.01%)</title><rect x="62.1835%" y="277" width="3.0063%" height="15" fill="rgb(239,76,54)" fg:x="393" fg:w="19"/><text x="62.4335%" y="287.50">nda..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 2.69%)</title><rect x="62.5000%" y="261" width="2.6899%" height="15" fill="rgb(231,124,27)" fg:x="395" fg:w="17"/><text x="62.7500%" y="271.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 2.69%)</title><rect x="62.5000%" y="245" width="2.6899%" height="15" fill="rgb(249,195,6)" fg:x="395" fg:w="17"/><text x="62.7500%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 2.69%)</title><rect x="62.5000%" y="229" width="2.6899%" height="15" fill="rgb(237,174,47)" fg:x="395" fg:w="17"/><text x="62.7500%" y="239.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 2.69%)</title><rect x="62.5000%" y="213" width="2.6899%" height="15" fill="rgb(206,201,31)" fg:x="395" fg:w="17"/><text x="62.7500%" y="223.50">al..</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.16%)</title><rect x="65.0316%" y="197" width="0.1582%" height="15" fill="rgb(231,57,52)" fg:x="411" fg:w="1"/><text x="65.2816%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.16%)</title><rect x="65.0316%" y="181" width="0.1582%" height="15" fill="rgb(248,177,22)" fg:x="411" fg:w="1"/><text x="65.2816%" y="191.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr (4 samples, 0.63%)</title><rect x="65.1899%" y="277" width="0.6329%" height="15" fill="rgb(215,211,37)" fg:x="412" fg:w="4"/><text x="65.4399%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.63%)</title><rect x="65.1899%" y="261" width="0.6329%" height="15" fill="rgb(241,128,51)" fg:x="412" fg:w="4"/><text x="65.4399%" y="271.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::{{closure}} (4 samples, 0.63%)</title><rect x="65.1899%" y="245" width="0.6329%" height="15" fill="rgb(227,165,31)" fg:x="412" fg:w="4"/><text x="65.4399%" y="255.50"></text></g><g><title>nn::nn::relu (40 samples, 6.33%)</title><rect x="59.6519%" y="341" width="6.3291%" height="15" fill="rgb(228,167,24)" fg:x="377" fg:w="40"/><text x="59.9019%" y="351.50">nn::nn::..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (27 samples, 4.27%)</title><rect x="61.7089%" y="325" width="4.2722%" height="15" fill="rgb(228,143,12)" fg:x="390" fg:w="27"/><text x="61.9589%" y="335.50">ndarr..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (27 samples, 4.27%)</title><rect x="61.7089%" y="309" width="4.2722%" height="15" fill="rgb(249,149,8)" fg:x="390" fg:w="27"/><text x="61.9589%" y="319.50">ndarr..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (5 samples, 0.79%)</title><rect x="65.1899%" y="293" width="0.7911%" height="15" fill="rgb(243,35,44)" fg:x="412" fg:w="5"/><text x="65.4399%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (1 samples, 0.16%)</title><rect x="65.8228%" y="277" width="0.1582%" height="15" fill="rgb(246,89,9)" fg:x="416" fg:w="1"/><text x="66.0728%" y="287.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (1 samples, 0.16%)</title><rect x="65.8228%" y="261" width="0.1582%" height="15" fill="rgb(233,213,13)" fg:x="416" fg:w="1"/><text x="66.0728%" y="271.50"></text></g><g><title>__free (13 samples, 2.06%)</title><rect x="65.9810%" y="197" width="2.0570%" height="15" fill="rgb(233,141,41)" fg:x="417" fg:w="13"/><text x="66.2310%" y="207.50">_..</text></g><g><title>_int_free (5 samples, 0.79%)</title><rect x="67.2468%" y="181" width="0.7911%" height="15" fill="rgb(239,167,4)" fg:x="425" fg:w="5"/><text x="67.4968%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt; (15 samples, 2.37%)</title><rect x="65.9810%" y="325" width="2.3734%" height="15" fill="rgb(209,217,16)" fg:x="417" fg:w="15"/><text x="66.2310%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;&gt; (15 samples, 2.37%)</title><rect x="65.9810%" y="309" width="2.3734%" height="15" fill="rgb(219,88,35)" fg:x="417" fg:w="15"/><text x="66.2310%" y="319.50">co..</text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 2.37%)</title><rect x="65.9810%" y="293" width="2.3734%" height="15" fill="rgb(220,193,23)" fg:x="417" fg:w="15"/><text x="66.2310%" y="303.50">&lt;n..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (15 samples, 2.37%)</title><rect x="65.9810%" y="277" width="2.3734%" height="15" fill="rgb(230,90,52)" fg:x="417" fg:w="15"/><text x="66.2310%" y="287.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (15 samples, 2.37%)</title><rect x="65.9810%" y="261" width="2.3734%" height="15" fill="rgb(252,106,19)" fg:x="417" fg:w="15"/><text x="66.2310%" y="271.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 2.37%)</title><rect x="65.9810%" y="245" width="2.3734%" height="15" fill="rgb(206,74,20)" fg:x="417" fg:w="15"/><text x="66.2310%" y="255.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 2.37%)</title><rect x="65.9810%" y="229" width="2.3734%" height="15" fill="rgb(230,138,44)" fg:x="417" fg:w="15"/><text x="66.2310%" y="239.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (15 samples, 2.37%)</title><rect x="65.9810%" y="213" width="2.3734%" height="15" fill="rgb(235,182,43)" fg:x="417" fg:w="15"/><text x="66.2310%" y="223.50">al..</text></g><g><title>__rust_dealloc (2 samples, 0.32%)</title><rect x="68.0380%" y="197" width="0.3165%" height="15" fill="rgb(242,16,51)" fg:x="430" fg:w="2"/><text x="68.2880%" y="207.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_vec_dim_stride_unchecked (1 samples, 0.16%)</title><rect x="68.5127%" y="277" width="0.1582%" height="15" fill="rgb(248,9,4)" fg:x="433" fg:w="1"/><text x="68.7627%" y="287.50"></text></g><g><title>ndarray::impl_internal_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::with_strides_dim (1 samples, 0.16%)</title><rect x="68.5127%" y="261" width="0.1582%" height="15" fill="rgb(210,31,22)" fg:x="433" fg:w="1"/><text x="68.7627%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.16%)</title><rect x="69.1456%" y="229" width="0.1582%" height="15" fill="rgb(239,54,39)" fg:x="437" fg:w="1"/><text x="69.3956%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 4.91%)</title><rect x="68.8291%" y="261" width="4.9051%" height="15" fill="rgb(230,99,41)" fg:x="435" fg:w="31"/><text x="69.0791%" y="271.50">&lt;core:..</text></g><g><title>ndarray::iterators::to_vec_mapped::{{closure}} (29 samples, 4.59%)</title><rect x="69.1456%" y="245" width="4.5886%" height="15" fill="rgb(253,106,12)" fg:x="437" fg:w="29"/><text x="69.3956%" y="255.50">ndarr..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::{{closure}} (28 samples, 4.43%)</title><rect x="69.3038%" y="229" width="4.4304%" height="15" fill="rgb(213,46,41)" fg:x="438" fg:w="28"/><text x="69.5538%" y="239.50">ndarr..</text></g><g><title>nn::nn::sigmoid::{{closure}} (28 samples, 4.43%)</title><rect x="69.3038%" y="213" width="4.4304%" height="15" fill="rgb(215,133,35)" fg:x="438" fg:w="28"/><text x="69.5538%" y="223.50">nn::n..</text></g><g><title>std::f32::&lt;impl f32&gt;::exp (19 samples, 3.01%)</title><rect x="70.7278%" y="197" width="3.0063%" height="15" fill="rgb(213,28,5)" fg:x="447" fg:w="19"/><text x="70.9778%" y="207.50">std..</text></g><g><title>__expf_fma (19 samples, 3.01%)</title><rect x="70.7278%" y="181" width="3.0063%" height="15" fill="rgb(215,77,49)" fg:x="447" fg:w="19"/><text x="70.9778%" y="191.50">__e..</text></g><g><title>__GI___libc_malloc (7 samples, 1.11%)</title><rect x="74.0506%" y="149" width="1.1076%" height="15" fill="rgb(248,100,22)" fg:x="468" fg:w="7"/><text x="74.3006%" y="159.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (43 samples, 6.80%)</title><rect x="68.5127%" y="293" width="6.8038%" height="15" fill="rgb(208,67,9)" fg:x="433" fg:w="43"/><text x="68.7627%" y="303.50">ndarray::..</text></g><g><title>ndarray::iterators::to_vec_mapped (42 samples, 6.65%)</title><rect x="68.6709%" y="277" width="6.6456%" height="15" fill="rgb(219,133,21)" fg:x="434" fg:w="42"/><text x="68.9209%" y="287.50">ndarray::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 1.58%)</title><rect x="73.7342%" y="261" width="1.5823%" height="15" fill="rgb(246,46,29)" fg:x="466" fg:w="10"/><text x="73.9842%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 1.58%)</title><rect x="73.7342%" y="245" width="1.5823%" height="15" fill="rgb(246,185,52)" fg:x="466" fg:w="10"/><text x="73.9842%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 1.58%)</title><rect x="73.7342%" y="229" width="1.5823%" height="15" fill="rgb(252,136,11)" fg:x="466" fg:w="10"/><text x="73.9842%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 1.58%)</title><rect x="73.7342%" y="213" width="1.5823%" height="15" fill="rgb(219,138,53)" fg:x="466" fg:w="10"/><text x="73.9842%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 1.42%)</title><rect x="73.8924%" y="197" width="1.4241%" height="15" fill="rgb(211,51,23)" fg:x="467" fg:w="9"/><text x="74.1424%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 1.42%)</title><rect x="73.8924%" y="181" width="1.4241%" height="15" fill="rgb(247,221,28)" fg:x="467" fg:w="9"/><text x="74.1424%" y="191.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 1.42%)</title><rect x="73.8924%" y="165" width="1.4241%" height="15" fill="rgb(251,222,45)" fg:x="467" fg:w="9"/><text x="74.1424%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.16%)</title><rect x="75.1582%" y="149" width="0.1582%" height="15" fill="rgb(217,162,53)" fg:x="475" fg:w="1"/><text x="75.4082%" y="159.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr (5 samples, 0.79%)</title><rect x="75.3165%" y="277" width="0.7911%" height="15" fill="rgb(229,93,14)" fg:x="476" fg:w="5"/><text x="75.5665%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.79%)</title><rect x="75.3165%" y="261" width="0.7911%" height="15" fill="rgb(209,67,49)" fg:x="476" fg:w="5"/><text x="75.5665%" y="271.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::{{closure}} (5 samples, 0.79%)</title><rect x="75.3165%" y="245" width="0.7911%" height="15" fill="rgb(213,87,29)" fg:x="476" fg:w="5"/><text x="75.5665%" y="255.50"></text></g><g><title>nn::nn::sigmoid (66 samples, 10.44%)</title><rect x="65.9810%" y="341" width="10.4430%" height="15" fill="rgb(205,151,52)" fg:x="417" fg:w="66"/><text x="66.2310%" y="351.50">nn::nn::sigmoid</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (51 samples, 8.07%)</title><rect x="68.3544%" y="325" width="8.0696%" height="15" fill="rgb(253,215,39)" fg:x="432" fg:w="51"/><text x="68.6044%" y="335.50">ndarray::im..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (50 samples, 7.91%)</title><rect x="68.5127%" y="309" width="7.9114%" height="15" fill="rgb(221,220,41)" fg:x="433" fg:w="50"/><text x="68.7627%" y="319.50">ndarray::im..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (7 samples, 1.11%)</title><rect x="75.3165%" y="293" width="1.1076%" height="15" fill="rgb(218,133,21)" fg:x="476" fg:w="7"/><text x="75.5665%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (2 samples, 0.32%)</title><rect x="76.1076%" y="277" width="0.3165%" height="15" fill="rgb(221,193,43)" fg:x="481" fg:w="2"/><text x="76.3576%" y="287.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (2 samples, 0.32%)</title><rect x="76.1076%" y="261" width="0.3165%" height="15" fill="rgb(240,128,52)" fg:x="481" fg:w="2"/><text x="76.3576%" y="271.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (2 samples, 0.32%)</title><rect x="76.1076%" y="245" width="0.3165%" height="15" fill="rgb(253,114,12)" fg:x="481" fg:w="2"/><text x="76.3576%" y="255.50"></text></g><g><title>__free (2 samples, 0.32%)</title><rect x="76.5823%" y="197" width="0.3165%" height="15" fill="rgb(215,223,47)" fg:x="484" fg:w="2"/><text x="76.8323%" y="207.50"></text></g><g><title>_int_free (1 samples, 0.16%)</title><rect x="76.7405%" y="181" width="0.1582%" height="15" fill="rgb(248,225,23)" fg:x="485" fg:w="1"/><text x="76.9905%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt; (5 samples, 0.79%)</title><rect x="76.4241%" y="325" width="0.7911%" height="15" fill="rgb(250,108,0)" fg:x="483" fg:w="5"/><text x="76.6741%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;&gt; (5 samples, 0.79%)</title><rect x="76.4241%" y="309" width="0.7911%" height="15" fill="rgb(228,208,7)" fg:x="483" fg:w="5"/><text x="76.6741%" y="319.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.79%)</title><rect x="76.4241%" y="293" width="0.7911%" height="15" fill="rgb(244,45,10)" fg:x="483" fg:w="5"/><text x="76.6741%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (4 samples, 0.63%)</title><rect x="76.5823%" y="277" width="0.6329%" height="15" fill="rgb(207,125,25)" fg:x="484" fg:w="4"/><text x="76.8323%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (4 samples, 0.63%)</title><rect x="76.5823%" y="261" width="0.6329%" height="15" fill="rgb(210,195,18)" fg:x="484" fg:w="4"/><text x="76.8323%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.63%)</title><rect x="76.5823%" y="245" width="0.6329%" height="15" fill="rgb(249,80,12)" fg:x="484" fg:w="4"/><text x="76.8323%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.63%)</title><rect x="76.5823%" y="229" width="0.6329%" height="15" fill="rgb(221,65,9)" fg:x="484" fg:w="4"/><text x="76.8323%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.63%)</title><rect x="76.5823%" y="213" width="0.6329%" height="15" fill="rgb(235,49,36)" fg:x="484" fg:w="4"/><text x="76.8323%" y="223.50"></text></g><g><title>__rust_dealloc (2 samples, 0.32%)</title><rect x="76.8987%" y="197" width="0.3165%" height="15" fill="rgb(225,32,20)" fg:x="486" fg:w="2"/><text x="77.1487%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (106 samples, 16.77%)</title><rect x="77.3734%" y="261" width="16.7722%" height="15" fill="rgb(215,141,46)" fg:x="489" fg:w="106"/><text x="77.6234%" y="271.50">&lt;core::slice::iter::Iter&lt;T..</text></g><g><title>ndarray::iterators::to_vec_mapped::{{closure}} (104 samples, 16.46%)</title><rect x="77.6899%" y="245" width="16.4557%" height="15" fill="rgb(250,160,47)" fg:x="491" fg:w="104"/><text x="77.9399%" y="255.50">ndarray::iterators::to_ve..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::{{closure}} (104 samples, 16.46%)</title><rect x="77.6899%" y="229" width="16.4557%" height="15" fill="rgb(216,222,40)" fg:x="491" fg:w="104"/><text x="77.9399%" y="239.50">ndarray::impl_methods::&lt;i..</text></g><g><title>nn::nn::tanh::{{closure}} (104 samples, 16.46%)</title><rect x="77.6899%" y="213" width="16.4557%" height="15" fill="rgb(234,217,39)" fg:x="491" fg:w="104"/><text x="77.9399%" y="223.50">nn::nn::tanh::{{closure}}</text></g><g><title>std::f32::&lt;impl f32&gt;::tanh (104 samples, 16.46%)</title><rect x="77.6899%" y="197" width="16.4557%" height="15" fill="rgb(207,178,40)" fg:x="491" fg:w="104"/><text x="77.9399%" y="207.50">std::f32::&lt;impl f32&gt;::tanh</text></g><g><title>__tanhf (104 samples, 16.46%)</title><rect x="77.6899%" y="181" width="16.4557%" height="15" fill="rgb(221,136,13)" fg:x="491" fg:w="104"/><text x="77.9399%" y="191.50">__tanhf</text></g><g><title>__expm1f (81 samples, 12.82%)</title><rect x="81.3291%" y="165" width="12.8165%" height="15" fill="rgb(249,199,10)" fg:x="514" fg:w="81"/><text x="81.5791%" y="175.50">__expm1f</text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (115 samples, 18.20%)</title><rect x="77.2152%" y="293" width="18.1962%" height="15" fill="rgb(249,222,13)" fg:x="488" fg:w="115"/><text x="77.4652%" y="303.50">ndarray::impl_constructors::..</text></g><g><title>ndarray::iterators::to_vec_mapped (114 samples, 18.04%)</title><rect x="77.3734%" y="277" width="18.0380%" height="15" fill="rgb(244,185,38)" fg:x="489" fg:w="114"/><text x="77.6234%" y="287.50">ndarray::iterators::to_vec_m..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 1.27%)</title><rect x="94.1456%" y="261" width="1.2658%" height="15" fill="rgb(236,202,9)" fg:x="595" fg:w="8"/><text x="94.3956%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 1.27%)</title><rect x="94.1456%" y="245" width="1.2658%" height="15" fill="rgb(250,229,37)" fg:x="595" fg:w="8"/><text x="94.3956%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 1.27%)</title><rect x="94.1456%" y="229" width="1.2658%" height="15" fill="rgb(206,174,23)" fg:x="595" fg:w="8"/><text x="94.3956%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 1.27%)</title><rect x="94.1456%" y="213" width="1.2658%" height="15" fill="rgb(211,33,43)" fg:x="595" fg:w="8"/><text x="94.3956%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.95%)</title><rect x="94.4620%" y="197" width="0.9494%" height="15" fill="rgb(245,58,50)" fg:x="597" fg:w="6"/><text x="94.7120%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.95%)</title><rect x="94.4620%" y="181" width="0.9494%" height="15" fill="rgb(244,68,36)" fg:x="597" fg:w="6"/><text x="94.7120%" y="191.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.95%)</title><rect x="94.4620%" y="165" width="0.9494%" height="15" fill="rgb(232,229,15)" fg:x="597" fg:w="6"/><text x="94.7120%" y="175.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.79%)</title><rect x="94.6203%" y="149" width="0.7911%" height="15" fill="rgb(254,30,23)" fg:x="598" fg:w="5"/><text x="94.8703%" y="159.50"></text></g><g><title>_int_malloc (4 samples, 0.63%)</title><rect x="94.7785%" y="133" width="0.6329%" height="15" fill="rgb(235,160,14)" fg:x="599" fg:w="4"/><text x="95.0285%" y="143.50"></text></g><g><title>&lt;nn::XORNet as nn::nn::NN&gt;::forward (508 samples, 80.38%)</title><rect x="15.1899%" y="357" width="80.3797%" height="15" fill="rgb(212,155,44)" fg:x="96" fg:w="508"/><text x="15.4399%" y="367.50">&lt;nn::XORNet as nn::nn::NN&gt;::forward</text></g><g><title>nn::nn::tanh (121 samples, 19.15%)</title><rect x="76.4241%" y="341" width="19.1456%" height="15" fill="rgb(226,2,50)" fg:x="483" fg:w="121"/><text x="76.6741%" y="351.50">nn::nn::tanh</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (116 samples, 18.35%)</title><rect x="77.2152%" y="325" width="18.3544%" height="15" fill="rgb(234,177,6)" fg:x="488" fg:w="116"/><text x="77.4652%" y="335.50">ndarray::impl_methods::&lt;impl ..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (116 samples, 18.35%)</title><rect x="77.2152%" y="309" width="18.3544%" height="15" fill="rgb(217,24,9)" fg:x="488" fg:w="116"/><text x="77.4652%" y="319.50">ndarray::impl_methods::&lt;impl ..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (1 samples, 0.16%)</title><rect x="95.4114%" y="293" width="0.1582%" height="15" fill="rgb(220,13,46)" fg:x="603" fg:w="1"/><text x="95.6614%" y="303.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr (1 samples, 0.16%)</title><rect x="95.4114%" y="277" width="0.1582%" height="15" fill="rgb(239,221,27)" fg:x="603" fg:w="1"/><text x="95.6614%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.16%)</title><rect x="95.4114%" y="261" width="0.1582%" height="15" fill="rgb(222,198,25)" fg:x="603" fg:w="1"/><text x="95.6614%" y="271.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::{{closure}} (1 samples, 0.16%)</title><rect x="95.4114%" y="245" width="0.1582%" height="15" fill="rgb(211,99,13)" fg:x="603" fg:w="1"/><text x="95.6614%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt; (8 samples, 1.27%)</title><rect x="95.5696%" y="357" width="1.2658%" height="15" fill="rgb(232,111,31)" fg:x="604" fg:w="8"/><text x="95.8196%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;&gt; (8 samples, 1.27%)</title><rect x="95.5696%" y="341" width="1.2658%" height="15" fill="rgb(245,82,37)" fg:x="604" fg:w="8"/><text x="95.8196%" y="351.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 1.27%)</title><rect x="95.5696%" y="325" width="1.2658%" height="15" fill="rgb(227,149,46)" fg:x="604" fg:w="8"/><text x="95.8196%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (7 samples, 1.11%)</title><rect x="95.7278%" y="309" width="1.1076%" height="15" fill="rgb(218,36,50)" fg:x="605" fg:w="7"/><text x="95.9778%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (7 samples, 1.11%)</title><rect x="95.7278%" y="293" width="1.1076%" height="15" fill="rgb(226,80,48)" fg:x="605" fg:w="7"/><text x="95.9778%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 1.11%)</title><rect x="95.7278%" y="277" width="1.1076%" height="15" fill="rgb(238,224,15)" fg:x="605" fg:w="7"/><text x="95.9778%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 1.11%)</title><rect x="95.7278%" y="261" width="1.1076%" height="15" fill="rgb(241,136,10)" fg:x="605" fg:w="7"/><text x="95.9778%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 1.11%)</title><rect x="95.7278%" y="245" width="1.1076%" height="15" fill="rgb(208,32,45)" fg:x="605" fg:w="7"/><text x="95.9778%" y="255.50"></text></g><g><title>__free (7 samples, 1.11%)</title><rect x="95.7278%" y="229" width="1.1076%" height="15" fill="rgb(207,135,9)" fg:x="605" fg:w="7"/><text x="95.9778%" y="239.50"></text></g><g><title>_int_free (3 samples, 0.47%)</title><rect x="96.3608%" y="213" width="0.4747%" height="15" fill="rgb(206,86,44)" fg:x="609" fg:w="3"/><text x="96.6108%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.95%)</title><rect x="96.8354%" y="341" width="0.9494%" height="15" fill="rgb(245,177,15)" fg:x="612" fg:w="6"/><text x="97.0854%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.95%)</title><rect x="96.8354%" y="325" width="0.9494%" height="15" fill="rgb(206,64,50)" fg:x="612" fg:w="6"/><text x="97.0854%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.95%)</title><rect x="96.8354%" y="309" width="0.9494%" height="15" fill="rgb(234,36,40)" fg:x="612" fg:w="6"/><text x="97.0854%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.95%)</title><rect x="96.8354%" y="293" width="0.9494%" height="15" fill="rgb(213,64,8)" fg:x="612" fg:w="6"/><text x="97.0854%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.95%)</title><rect x="96.8354%" y="277" width="0.9494%" height="15" fill="rgb(210,75,36)" fg:x="612" fg:w="6"/><text x="97.0854%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.95%)</title><rect x="96.8354%" y="261" width="0.9494%" height="15" fill="rgb(229,88,21)" fg:x="612" fg:w="6"/><text x="97.0854%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.95%)</title><rect x="96.8354%" y="245" width="0.9494%" height="15" fill="rgb(252,204,47)" fg:x="612" fg:w="6"/><text x="97.0854%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.95%)</title><rect x="96.8354%" y="229" width="0.9494%" height="15" fill="rgb(208,77,27)" fg:x="612" fg:w="6"/><text x="97.0854%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.95%)</title><rect x="96.8354%" y="213" width="0.9494%" height="15" fill="rgb(221,76,26)" fg:x="612" fg:w="6"/><text x="97.0854%" y="223.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.95%)</title><rect x="96.8354%" y="197" width="0.9494%" height="15" fill="rgb(225,139,18)" fg:x="612" fg:w="6"/><text x="97.0854%" y="207.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.95%)</title><rect x="96.8354%" y="181" width="0.9494%" height="15" fill="rgb(230,137,11)" fg:x="612" fg:w="6"/><text x="97.0854%" y="191.50"></text></g><g><title>__libc_start_main_alias_2 (524 samples, 82.91%)</title><rect x="15.1899%" y="485" width="82.9114%" height="15" fill="rgb(212,28,1)" fg:x="96" fg:w="524"/><text x="15.4399%" y="495.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (524 samples, 82.91%)</title><rect x="15.1899%" y="469" width="82.9114%" height="15" fill="rgb(248,164,17)" fg:x="96" fg:w="524"/><text x="15.4399%" y="479.50">__libc_start_call_main</text></g><g><title>main (524 samples, 82.91%)</title><rect x="15.1899%" y="453" width="82.9114%" height="15" fill="rgb(222,171,42)" fg:x="96" fg:w="524"/><text x="15.4399%" y="463.50">main</text></g><g><title>std::rt::lang_start_internal (524 samples, 82.91%)</title><rect x="15.1899%" y="437" width="82.9114%" height="15" fill="rgb(243,84,45)" fg:x="96" fg:w="524"/><text x="15.4399%" y="447.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (524 samples, 82.91%)</title><rect x="15.1899%" y="421" width="82.9114%" height="15" fill="rgb(252,49,23)" fg:x="96" fg:w="524"/><text x="15.4399%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (524 samples, 82.91%)</title><rect x="15.1899%" y="405" width="82.9114%" height="15" fill="rgb(215,19,7)" fg:x="96" fg:w="524"/><text x="15.4399%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (524 samples, 82.91%)</title><rect x="15.1899%" y="389" width="82.9114%" height="15" fill="rgb(238,81,41)" fg:x="96" fg:w="524"/><text x="15.4399%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>nn::main (524 samples, 82.91%)</title><rect x="15.1899%" y="373" width="82.9114%" height="15" fill="rgb(210,199,37)" fg:x="96" fg:w="524"/><text x="15.4399%" y="383.50">nn::main</text></g><g><title>ndarray::free_functions::arr1 (8 samples, 1.27%)</title><rect x="96.8354%" y="357" width="1.2658%" height="15" fill="rgb(244,192,49)" fg:x="612" fg:w="8"/><text x="97.0854%" y="367.50"></text></g><g><title>ndarray::arraytraits::&lt;impl core::convert::From&lt;alloc::vec::Vec&lt;A&gt;&gt; for ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;::from (2 samples, 0.32%)</title><rect x="97.7848%" y="341" width="0.3165%" height="15" fill="rgb(226,211,11)" fg:x="618" fg:w="2"/><text x="98.0348%" y="351.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt;::from_vec (2 samples, 0.32%)</title><rect x="97.7848%" y="325" width="0.3165%" height="15" fill="rgb(236,162,54)" fg:x="618" fg:w="2"/><text x="98.0348%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (2 samples, 0.32%)</title><rect x="97.7848%" y="309" width="0.3165%" height="15" fill="rgb(220,229,9)" fg:x="618" fg:w="2"/><text x="98.0348%" y="319.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_vec_dim_stride_unchecked (2 samples, 0.32%)</title><rect x="97.7848%" y="293" width="0.3165%" height="15" fill="rgb(250,87,22)" fg:x="618" fg:w="2"/><text x="98.0348%" y="303.50"></text></g><g><title>ndarray::impl_internal_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::with_strides_dim (2 samples, 0.32%)</title><rect x="97.7848%" y="277" width="0.3165%" height="15" fill="rgb(239,43,17)" fg:x="618" fg:w="2"/><text x="98.0348%" y="287.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.16%)</title><rect x="98.1013%" y="453" width="0.1582%" height="15" fill="rgb(231,177,25)" fg:x="620" fg:w="1"/><text x="98.3513%" y="463.50"></text></g><g><title>_start (531 samples, 84.02%)</title><rect x="14.3987%" y="501" width="84.0190%" height="15" fill="rgb(219,179,1)" fg:x="91" fg:w="531"/><text x="14.6487%" y="511.50">_start</text></g><g><title>_dl_start (2 samples, 0.32%)</title><rect x="98.1013%" y="485" width="0.3165%" height="15" fill="rgb(238,219,53)" fg:x="620" fg:w="2"/><text x="98.3513%" y="495.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.32%)</title><rect x="98.1013%" y="469" width="0.3165%" height="15" fill="rgb(232,167,36)" fg:x="620" fg:w="2"/><text x="98.3513%" y="479.50"></text></g><g><title>dl_main (1 samples, 0.16%)</title><rect x="98.2595%" y="453" width="0.1582%" height="15" fill="rgb(244,19,51)" fg:x="621" fg:w="1"/><text x="98.5095%" y="463.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.16%)</title><rect x="98.2595%" y="437" width="0.1582%" height="15" fill="rgb(224,6,22)" fg:x="621" fg:w="1"/><text x="98.5095%" y="447.50"></text></g><g><title>__strnlen_ifunc (1 samples, 0.16%)</title><rect x="98.2595%" y="421" width="0.1582%" height="15" fill="rgb(224,145,5)" fg:x="621" fg:w="1"/><text x="98.5095%" y="431.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (5 samples, 0.79%)</title><rect x="98.4177%" y="501" width="0.7911%" height="15" fill="rgb(234,130,49)" fg:x="622" fg:w="5"/><text x="98.6677%" y="511.50"></text></g><g><title>nn::nn::Linear::calc (1 samples, 0.16%)</title><rect x="99.2089%" y="469" width="0.1582%" height="15" fill="rgb(254,6,2)" fg:x="627" fg:w="1"/><text x="99.4589%" y="479.50"></text></g><g><title>nn::nn::relu (1 samples, 0.16%)</title><rect x="99.3671%" y="469" width="0.1582%" height="15" fill="rgb(208,96,46)" fg:x="628" fg:w="1"/><text x="99.6171%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt; (1 samples, 0.16%)</title><rect x="99.3671%" y="453" width="0.1582%" height="15" fill="rgb(239,3,39)" fg:x="628" fg:w="1"/><text x="99.6171%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;&gt; (1 samples, 0.16%)</title><rect x="99.3671%" y="437" width="0.1582%" height="15" fill="rgb(233,210,1)" fg:x="628" fg:w="1"/><text x="99.6171%" y="447.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="99.3671%" y="421" width="0.1582%" height="15" fill="rgb(244,137,37)" fg:x="628" fg:w="1"/><text x="99.6171%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (1 samples, 0.16%)</title><rect x="99.3671%" y="405" width="0.1582%" height="15" fill="rgb(240,136,2)" fg:x="628" fg:w="1"/><text x="99.6171%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (1 samples, 0.16%)</title><rect x="99.3671%" y="389" width="0.1582%" height="15" fill="rgb(239,18,37)" fg:x="628" fg:w="1"/><text x="99.6171%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="99.3671%" y="373" width="0.1582%" height="15" fill="rgb(218,185,22)" fg:x="628" fg:w="1"/><text x="99.6171%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.16%)</title><rect x="99.3671%" y="357" width="0.1582%" height="15" fill="rgb(225,218,4)" fg:x="628" fg:w="1"/><text x="99.6171%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.16%)</title><rect x="99.3671%" y="341" width="0.1582%" height="15" fill="rgb(230,182,32)" fg:x="628" fg:w="1"/><text x="99.6171%" y="351.50"></text></g><g><title>&lt;nn::XORNet as nn::nn::NN&gt;::forward (3 samples, 0.47%)</title><rect x="99.2089%" y="485" width="0.4747%" height="15" fill="rgb(242,56,43)" fg:x="627" fg:w="3"/><text x="99.4589%" y="495.50"></text></g><g><title>nn::nn::tanh (1 samples, 0.16%)</title><rect x="99.5253%" y="469" width="0.1582%" height="15" fill="rgb(233,99,24)" fg:x="629" fg:w="1"/><text x="99.7753%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt; (1 samples, 0.16%)</title><rect x="99.5253%" y="453" width="0.1582%" height="15" fill="rgb(234,209,42)" fg:x="629" fg:w="1"/><text x="99.7753%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;&gt; (1 samples, 0.16%)</title><rect x="99.5253%" y="437" width="0.1582%" height="15" fill="rgb(227,7,12)" fg:x="629" fg:w="1"/><text x="99.7753%" y="447.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="99.5253%" y="421" width="0.1582%" height="15" fill="rgb(245,203,43)" fg:x="629" fg:w="1"/><text x="99.7753%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (1 samples, 0.16%)</title><rect x="99.5253%" y="405" width="0.1582%" height="15" fill="rgb(238,205,33)" fg:x="629" fg:w="1"/><text x="99.7753%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (1 samples, 0.16%)</title><rect x="99.5253%" y="389" width="0.1582%" height="15" fill="rgb(231,56,7)" fg:x="629" fg:w="1"/><text x="99.7753%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="99.5253%" y="373" width="0.1582%" height="15" fill="rgb(244,186,29)" fg:x="629" fg:w="1"/><text x="99.7753%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.16%)</title><rect x="99.5253%" y="357" width="0.1582%" height="15" fill="rgb(234,111,31)" fg:x="629" fg:w="1"/><text x="99.7753%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.16%)</title><rect x="99.5253%" y="341" width="0.1582%" height="15" fill="rgb(241,149,10)" fg:x="629" fg:w="1"/><text x="99.7753%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;[usize: 1]&gt;&gt;&gt; (1 samples, 0.16%)</title><rect x="99.6835%" y="485" width="0.1582%" height="15" fill="rgb(249,206,44)" fg:x="630" fg:w="1"/><text x="99.9335%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;&gt; (1 samples, 0.16%)</title><rect x="99.6835%" y="469" width="0.1582%" height="15" fill="rgb(251,153,30)" fg:x="630" fg:w="1"/><text x="99.9335%" y="479.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="99.6835%" y="453" width="0.1582%" height="15" fill="rgb(239,152,38)" fg:x="630" fg:w="1"/><text x="99.9335%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (1 samples, 0.16%)</title><rect x="99.6835%" y="437" width="0.1582%" height="15" fill="rgb(249,139,47)" fg:x="630" fg:w="1"/><text x="99.9335%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (1 samples, 0.16%)</title><rect x="99.6835%" y="421" width="0.1582%" height="15" fill="rgb(244,64,35)" fg:x="630" fg:w="1"/><text x="99.9335%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="99.6835%" y="405" width="0.1582%" height="15" fill="rgb(216,46,15)" fg:x="630" fg:w="1"/><text x="99.9335%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.16%)</title><rect x="99.6835%" y="389" width="0.1582%" height="15" fill="rgb(250,74,19)" fg:x="630" fg:w="1"/><text x="99.9335%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.16%)</title><rect x="99.6835%" y="373" width="0.1582%" height="15" fill="rgb(249,42,33)" fg:x="630" fg:w="1"/><text x="99.9335%" y="383.50"></text></g><g><title>all (632 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="632"/><text x="0.2500%" y="543.50"></text></g><g><title>nn (632 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="632"/><text x="0.2500%" y="527.50">nn</text></g><g><title>nn::main (5 samples, 0.79%)</title><rect x="99.2089%" y="501" width="0.7911%" height="15" fill="rgb(220,130,37)" fg:x="627" fg:w="5"/><text x="99.4589%" y="511.50"></text></g><g><title>ndarray::free_functions::arr1 (1 samples, 0.16%)</title><rect x="99.8418%" y="485" width="0.1582%" height="15" fill="rgb(211,67,2)" fg:x="631" fg:w="1"/><text x="100.0918%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.16%)</title><rect x="99.8418%" y="469" width="0.1582%" height="15" fill="rgb(235,68,52)" fg:x="631" fg:w="1"/><text x="100.0918%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.16%)</title><rect x="99.8418%" y="453" width="0.1582%" height="15" fill="rgb(246,142,3)" fg:x="631" fg:w="1"/><text x="100.0918%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.16%)</title><rect x="99.8418%" y="437" width="0.1582%" height="15" fill="rgb(241,25,7)" fg:x="631" fg:w="1"/><text x="100.0918%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.16%)</title><rect x="99.8418%" y="421" width="0.1582%" height="15" fill="rgb(242,119,39)" fg:x="631" fg:w="1"/><text x="100.0918%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.16%)</title><rect x="99.8418%" y="405" width="0.1582%" height="15" fill="rgb(241,98,45)" fg:x="631" fg:w="1"/><text x="100.0918%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.16%)</title><rect x="99.8418%" y="389" width="0.1582%" height="15" fill="rgb(254,28,30)" fg:x="631" fg:w="1"/><text x="100.0918%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.16%)</title><rect x="99.8418%" y="373" width="0.1582%" height="15" fill="rgb(241,142,54)" fg:x="631" fg:w="1"/><text x="100.0918%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.16%)</title><rect x="99.8418%" y="357" width="0.1582%" height="15" fill="rgb(222,85,15)" fg:x="631" fg:w="1"/><text x="100.0918%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.16%)</title><rect x="99.8418%" y="341" width="0.1582%" height="15" fill="rgb(210,85,47)" fg:x="631" fg:w="1"/><text x="100.0918%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.16%)</title><rect x="99.8418%" y="325" width="0.1582%" height="15" fill="rgb(224,206,25)" fg:x="631" fg:w="1"/><text x="100.0918%" y="335.50"></text></g></svg></svg>